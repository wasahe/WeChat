<?php
if (!defined('IN_IA')) {    exit('Access Denied');}/** * 返回相应时间戳 * @param number $y 年 * @param number $m 月 * @param number $d 日 * @return number */function getDay($d=0,$m=0,$y=0){    $day['start'] = mktime(0,0,0,date("m")+$m,date("d")+$d,date("Y")+$y);    $day['end']   = mktime(23,59,59,date("m")+$m,date("d")+$d,date("Y")+$y);    return $day;}/** * json返回数据 * @param number $status * @param string $return */function show_json($status = 1, $return = null){    $ret = array(        'status' => $status    );    if ($return) {        $ret['result'] = $return;    }    die(json_encode($ret));}/** * 生成订单 * @param unknown $table * @param unknown $field * @param unknown $prefix * @return string */function createNO($table, $field, $prefix){    $billno = date('YmdHis') . random(4, true);    while (1) {        $count = pdo_fetchcolumn('select count(*) from ' . tablename($table) . " where {$field}=:billno limit 1", array(':billno' => $billno));        if ($count <= 0) {            break;        }        $billno = date('YmdHis') . random(4, true);    }    return $prefix . $billno;}/** * 判断是否微信端登录 * @return boolean */function is_weixin(){    if (empty($_SERVER['HTTP_USER_AGENT']) || strpos($_SERVER['HTTP_USER_AGENT'], 'MicroMessenger') === false && strpos($_SERVER['HTTP_USER_AGENT'], 'Windows Phone') === false) {        die("<!DOCTYPE html>            <html>                <head>                    <meta name='viewport' content='width=device-width, initial-scale=1, user-scalable=0'>                    <title>抱歉，出错了</title><meta charset='utf-8'><meta name='viewport' content='width=device-width, initial-scale=1, user-scalable=0'><link rel='stylesheet' type='text/css' href='https://res.wx.qq.com/connect/zh_CN/htmledition/style/wap_err1a9853.css'>                </head>                <body>                    <div class='page_msg'><div class='inner'><span class='msg_icon_wrp'><i class='icon80_smile'></i></span><div class='msg_content'><h4>请在微信客户端打开链接</h4></div></div></div>                </body>            </html>");        return false;    }    return true;}/** * 浏览器友好的变量输出 * @param mixed $var 变量 * @param boolean $echo 是否输出 默认为True 如果为false 则返回输出字符串 * @param string $label 标签 默认为空 * @param boolean $strict 是否严谨 默认为true * @return void|string */function dump($var, $echo=true, $label=null, $strict=true) {    $label = ($label === null) ? '' : rtrim($label) . ' ';    if (!$strict) {        if (ini_get('html_errors')) {            $output = print_r($var, true);            $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>';        } else {            $output = $label . print_r($var, true);        }    } else {        ob_start();        var_dump($var);        $output = ob_get_clean();        if (!extension_loaded('xdebug')) {            $output = preg_replace('/\]\=\>\n(\s+)/m', '] => ', $output);            $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>';        }    }    if ($echo) {        echo($output);        return null;    }else        return $output;}/** * 验证会员登录 */function checkMember($openid = ''){    global $_W, $_GPC;    load()->model('mc');    if (strexists($_SERVER['REQUEST_URI'], '/web/')) {        return;    }    if (empty($openid)) {        $userinfo = mc_oauth_userinfo();        $openid = $userinfo['openid'];    }    if (empty($openid)) {        return;    }    $member   = getMember($openid);    $userinfo = mc_oauth_userinfo();    $followed = followed($openid);    $uid      = 0;    $mc       = array();    if ($followed) {        $uid = mc_openid2uid($openid);        $mc  = mc_fetch($uid, array(            'realname',            'mobile',            'avatar',            'resideprovince',            'residecity',            'residedist'        ));    }    if (empty($member)) {        $member = array(            'uniacid' => $_W['uniacid'],            'nickname' => !empty($mc['nickname']) ? $mc['nickname'] : $userinfo['nickname'],            'avatar' => !empty($mc['avatar']) ? $mc['avatar'] : $userinfo['avatar'],            'gender' => !empty($mc['gender']) ? $mc['gender'] : $userinfo['sex'],            'resideprovince' => !empty($mc['residecity']) ? $mc['resideprovince'] : $userinfo['province'],            'residecity' => !empty($mc['residecity']) ? $mc['residecity'] : $userinfo['city'],            'createtime' => time(),        );                pdo_insert('mc_members', $member);                $member['isnew'] = true;    } else {        $upgrade = array();        if ($userinfo['nickname'] != $member['nickname'] && !empty($userinfo['nickname'])) {            $upgrade['nickname'] = $userinfo['nickname'];        }        if ($userinfo['avatar'] != $member['avatar'] && !empty($userinfo['avatar'])) {            $upgrade['avatar'] = $userinfo['avatar'];        }        if (!empty($upgrade)) {            pdo_update('mc_members', $upgrade, array( 'uid' => $member['uid'] ));        }        $member['isnew'] = false;    }    return $member;}/** * 获取积分商城用户信息（同步系统积分和余额） * @param string $openid * @return boolean */function getMember($openid = ''){    global $_W;    load()->model('mc');    $uid = intval($openid);    if (empty($uid)) {        $uid   = mc_openid2uid($openid);        $info = pdo_fetch('select * from ' . tablename('mc_members') . ' where uid=:uid and uniacid=:uniacid limit 1', array(            ':uniacid' => $_W['uniacid'],            ':uid' => $uid        ));    } else {        $info = pdo_fetch('select * from ' . tablename('mc_members') . ' where uid=:uid and uniacid=:uniacid limit 1', array(            ':uniacid' => $_W['uniacid'],            ':uid' => $uid        ));    }    return $info;}/** * 获取积分或余额 * @param string $openid * @param unknown $credittypes * @return boolean */function getCredits($openid = '', $credittypes = array('credit1', 'credit2')){    global $_W;    load()->model('mc');    $uid   = mc_openid2uid($openid);    $types = implode(',', $credittypes);    if (!empty($uid)) {        return pdo_fetch("SELECT {$types} FROM " . tablename('mc_members') . " WHERE `uid` = :uid limit 1", array(            ':uid' => $uid        ));    }}/** * 获取当前用户的积分 * @param string $openid * @param string $credittype * @return boolean */function getCredit($openid = '', $credittype = 'credit1'){    global $_W;    load()->model('mc');    $uid = mc_openid2uid($openid);    if (!empty($uid)) {        return pdo_fetchcolumn("SELECT {$credittype} FROM " . tablename('mc_members') . " WHERE `uid` = :uid", array(            ':uid' => $uid        ));    }}/** * 是否关注 * @param string $openid * @return boolean */function followed($openid = ''){    global $_W;    $followed = !empty($openid);    if ($followed) {        $mf       = pdo_fetch("select follow from " . tablename('mc_mapping_fans') . " where openid=:openid and uniacid=:uniacid limit 1", array(            ":openid" => $openid,            ':uniacid' => $_W['uniacid']        ));        $followed = $mf['follow'] == 1;    }    return $followed;}/** * 补全图片路径 * @param unknown $list * @param string $fields * @return unknown|string */function set_medias($list = array(), $fields = null){    if (empty($fields)) {        foreach ($list as &$row) {            $row = tomedia($row);        }        return $list;    }    if (!is_array($fields)) {        $fields = explode(',', $fields);    }    if (is_array2($list)) {        foreach ($list as $key => &$value) {            foreach ($fields as $field) {                if (isset($list[$field])) {                    $list[$field] = tomedia($list[$field]);                }                if (is_array($value) && isset($value[$field])) {                    $value[$field] = tomedia($value[$field]);                }            }        }        return $list;    } else {        foreach ($fields as $field) {            if (isset($list[$field])) {                $list[$field] = tomedia($list[$field]);            }        }        return $list;    }}/** * 是否多维数组 * @param unknown $array * @return boolean */function is_array2($array){    if (is_array($array)) {        foreach ($array as $k => $v) {            return is_array($v);        }        return false;    }    return false;}